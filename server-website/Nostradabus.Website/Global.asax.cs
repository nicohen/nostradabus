using System;
using System.Configuration;
using System.Web.Mvc;
using System.Web.Routing;
using Microsoft.Practices.ServiceLocation;
using Microsoft.Practices.Unity;
using Microsoft.Practices.Unity.Configuration;
using Nostradabus.Persistence.Interfaces.Common;

namespace Nostradabus.Website
{
	// Note: For instructions on enabling IIS6 or IIS7 classic mode, 
	// visit http://go.microsoft.com/?LinkId=9394801

	public class MvcApplication : System.Web.HttpApplication
	{
		public static void RegisterGlobalFilters(GlobalFilterCollection filters)
		{
			filters.Add(new HandleErrorAttribute());
		}

		public static void RegisterRoutes(RouteCollection routes)
		{
			routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

			routes.MapRoute(
				"Default", // Route name
				"{controller}/{action}/{id}", // URL with parameters
				new { controller = "Home", action = "Index", id = UrlParameter.Optional } // Parameter defaults
			);
		}

		protected void Application_Start()
		{
			AreaRegistration.RegisterAllAreas();

			RegisterGlobalFilters(GlobalFilters.Filters);

			RegisterRoutes(RouteTable.Routes);
			
			//Create and Configure Unity.
			IUnityContainer container = InitUnity();
			ServiceLocator.SetLocatorProvider(() => new UnityServiceLocator(container));

			//Uncomment this line to get the SQL statements generated by nHibernate
			// log4net.Config.XmlConfigurator.Configure();
			
			// Starts the auction scheduler (it must be enabled on the config file)
			//Scheduler.Start();

			//Init Nhibernate profiler.
			//NHibernateProfiler.Initialize();
		}

		protected void Application_BeginRequest(Object sender, EventArgs e)
		{
			ServiceLocator.Current.GetInstance<IPersistanceSessionManager>().OpenSession();
		}
		
		protected void Application_EndRequest(Object sender, EventArgs e)
		{
			//Close NHibernate Section.
			ServiceLocator.Current.GetInstance<IPersistanceSessionManager>().CloseSession();

			//HttpRequest request = HttpContext.Current.Request;
			//HttpResponse response = HttpContext.Current.Response;
			//if ((request.HttpMethod == "POST") && (response.StatusCode == 404 && response.SubStatusCode == 13))
			//{
			//    var app = (MvcApplication)sender;
			//    var context = app.Context;
			//    var ex = app.Server.GetLastError();
			//    app.Server.ClearError();
			//    context.Response.Clear();
			//    context.Response.ClearHeaders();
			//    context.ClearError();
			//    //var httpException = ex as HttpException;
			//    var routeData = new RouteData();
			//    routeData.Values["controller"] = "errors";
			//    routeData.Values["exception"] = ex;
			//    routeData.Values["action"] = "Error404_13";
			//    IController controller = new ErrorsController();
			//    controller.Execute(new RequestContext(new HttpContextWrapper(context), routeData));
			//}
		}

		protected void Session_End(Object sender, EventArgs e)
		{
			
		}

		protected void Application_Error(Object sender, EventArgs e)
		{

		}

		/// <summary>
		/// Initialization the unity.
		/// </summary>
		/// <returns></returns>
		private static IUnityContainer InitUnity()
		{
			var container = new UnityContainer();
			var section = (UnityConfigurationSection)ConfigurationManager.GetSection("unity");
			section.Configure(container);
			return container;
		}
	}
}